version: '3.8'

x-logging: &logging
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

x-labels: &labels
  labels:
      org.label-schema.group: "monitoring"      

services:
  prometheus:
    image: prom/prometheus:$${prometheus_vers}
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=48h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    expose:
      - 9090
    networks:
      monitor:
        ipv4_address: 10.10.10.2
    <<: *logging
    <<: *labels

  alertmanager:
    image: prom/alertmanager:$${alertmanager_vers}
    container_name: alertmanager
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    expose:
      - 9093
    networks:
      monitor:
       ipv4_address: 10.10.10.3
    <<: *logging
    <<: *labels

  nodeexporter:
    image: prom/node-exporter:$${node_exporter_vers}
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    restart: unless-stopped
    pid: "host"
    network_mode: host
    expose:
      - 9100
    <<: *logging
    <<: *labels

  nginx-exporter:
    image:  nginx/nginx-prometheus-exporter:$${nginx_prometheus_exporter_vers}
    container_name: nginx-exporter
    restart: unless-stopped
    environment:
      - SCRAPE_URI=http://${inst_priv_ip}:8066/nginx_status
      - TELEMETRY_PATH=/prometheus
      - NGINX_RETRIES=10
    expose:
      - 9113
    networks:
      monitor:
        ipv4_address: 10.10.10.5
    <<: *logging
    <<: *labels

  cadvisor:
    image: gcr.io/google-containers/cadvisor:$${cadvisor_vers}
    container_name: cadvisor
    privileged: true
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro 
    restart: unless-stopped
    command:
       - '--docker_only' 
       - '--disable_metrics=disk,diskIO,tcp,udp,percpu,sched,process'
       - '--housekeeping_interval=10s'
    expose:
      - 8080
    networks:
      monitor:
        ipv4_address: 10.10.10.6
    <<: *logging
    <<: *labels

  grafana:
    image: grafana/grafana:$${grafana_vers}
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SERVER_DOMAIN=${server_grafana}
      - GF_SERVER_ROOT_URL=https://${server_grafana}/
      - GF_SERVER_ENFORCE_DOMAIN=true
      - GF_SECURITY_ADMIN_USER=$${gf_admin_user}
      - GF_SECURITY_ADMIN_PASSWORD=$${gf_admin_password}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_RENDERING_SERVER_URL=http://renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
      - GF_LOG_FILTERS=rendering:debug
    restart: unless-stopped
    ports:
      - 3000:3000
    expose:
      - 3000
    networks:
      monitor:
        ipv4_address: 10.10.10.7
    <<: *logging
    <<: *labels

  renderer:
    image: grafana/grafana-image-renderer:$${renderer_vers}
    container_name: renderer
    ports:
      - 8081:8081
    environment:
      ENABLE_METRICS: 'true'
    networks:
      monitor:
        ipv4_address: 10.10.10.8
    <<: *logging
    <<: *labels

#  influxdb:
#    image: influxdb:$${INFLUXDB_VERS}
#    container_name: influxdb
#    restart: always
#    expose:
#      - 8086
#    env_file:
#      - './monitoring/env.influxdb'
#    volumes:
#      - ./monitoring/influxdb/data:/var/lib/influxdb
#    networks:
#      monitor:
#        ipv4_address: 10.10.10.9
#    <<: *logging
#    labels:
#      org.label-schema.group: "monitoring"

#  telegraf:
#    image: telegraf:$${TELEGRAF_VERS}
#    container_name: telegraf
#    restart: always
#    environment:
#      HOST_PROC: /rootfs/proc
#      HOST_SYS: /rootfs/sys
#      HOST_ETC: /rootfs/etc
#    volumes:
#      - ./monitoring/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf
#      - /var/run/docker.sock:/var/run/docker.sock:ro
#      - /sys:/rootfs/sys:ro
#      - /proc:/rootfs/proc:ro
#      - /etc:/rootfs/etc:ro
#      - ./nginx/log:/var/log/nginx:ro
#      - ./monitoring/telegraf/log:/var/log/telegraf
#    networks:
#      monitor:
#        ipv4_address: 10.10.10.10
#    <<: *logging
#    <<: *labels


volumes:
    prometheus_data: {}
    grafana_data: {}

networks:
  monitor:
    name: monitor
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.10.10.0/26